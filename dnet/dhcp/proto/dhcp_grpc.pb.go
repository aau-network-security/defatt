// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DHCPClient is the client API for DHCP service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DHCPClient interface {
	StartDHCP(ctx context.Context, in *StartReq, opts ...grpc.CallOption) (*Resp, error)
	StopDHCP(ctx context.Context, in *StopReq, opts ...grpc.CallOption) (*Resp, error)
	UpdateDHCP(ctx context.Context, in *UpdateReq, opts ...grpc.CallOption) (*Resp, error)
}

type dHCPClient struct {
	cc grpc.ClientConnInterface
}

func NewDHCPClient(cc grpc.ClientConnInterface) DHCPClient {
	return &dHCPClient{cc}
}

func (c *dHCPClient) StartDHCP(ctx context.Context, in *StartReq, opts ...grpc.CallOption) (*Resp, error) {
	out := new(Resp)
	err := c.cc.Invoke(ctx, "/DHCP/StartDHCP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dHCPClient) StopDHCP(ctx context.Context, in *StopReq, opts ...grpc.CallOption) (*Resp, error) {
	out := new(Resp)
	err := c.cc.Invoke(ctx, "/DHCP/StopDHCP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dHCPClient) UpdateDHCP(ctx context.Context, in *UpdateReq, opts ...grpc.CallOption) (*Resp, error) {
	out := new(Resp)
	err := c.cc.Invoke(ctx, "/DHCP/UpdateDHCP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DHCPServer is the server API for DHCP service.
// All implementations must embed UnimplementedDHCPServer
// for forward compatibility
type DHCPServer interface {
	StartDHCP(context.Context, *StartReq) (*Resp, error)
	StopDHCP(context.Context, *StopReq) (*Resp, error)
	UpdateDHCP(context.Context, *UpdateReq) (*Resp, error)
	mustEmbedUnimplementedDHCPServer()
}

// UnimplementedDHCPServer must be embedded to have forward compatible implementations.
type UnimplementedDHCPServer struct {
}

func (UnimplementedDHCPServer) StartDHCP(context.Context, *StartReq) (*Resp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartDHCP not implemented")
}
func (UnimplementedDHCPServer) StopDHCP(context.Context, *StopReq) (*Resp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopDHCP not implemented")
}
func (UnimplementedDHCPServer) UpdateDHCP(context.Context, *UpdateReq) (*Resp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDHCP not implemented")
}
func (UnimplementedDHCPServer) mustEmbedUnimplementedDHCPServer() {}

// UnsafeDHCPServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DHCPServer will
// result in compilation errors.
type UnsafeDHCPServer interface {
	mustEmbedUnimplementedDHCPServer()
}

func RegisterDHCPServer(s grpc.ServiceRegistrar, srv DHCPServer) {
	s.RegisterService(&DHCP_ServiceDesc, srv)
}

func _DHCP_StartDHCP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DHCPServer).StartDHCP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DHCP/StartDHCP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DHCPServer).StartDHCP(ctx, req.(*StartReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DHCP_StopDHCP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DHCPServer).StopDHCP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DHCP/StopDHCP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DHCPServer).StopDHCP(ctx, req.(*StopReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DHCP_UpdateDHCP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DHCPServer).UpdateDHCP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DHCP/UpdateDHCP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DHCPServer).UpdateDHCP(ctx, req.(*UpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

// DHCP_ServiceDesc is the grpc.ServiceDesc for DHCP service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DHCP_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "DHCP",
	HandlerType: (*DHCPServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartDHCP",
			Handler:    _DHCP_StartDHCP_Handler,
		},
		{
			MethodName: "StopDHCP",
			Handler:    _DHCP_StopDHCP_Handler,
		},
		{
			MethodName: "UpdateDHCP",
			Handler:    _DHCP_UpdateDHCP_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dhcp.proto",
}
